<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sgmp.webapp.mapper.mainframe.SelectionObjectTreeNodeMapper">

    <!-- 定义数据库字段与实体对象的映射关系 -->
    <resultMap type="org.sgmp.webapp.pojo.mainframe.SelectionObjectTreeNode" id="sotnResultMap">
        <id column="ID" property="id" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="TEXT" property="text" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="LEAF" property="leaf" javaType="java.lang.Boolean" jdbcType="VARCHAR" typeHandler="org.sgmp.common.mybatis.type.handler.BooleanFromStringTypeHandler" />
        <result column="SOTYPE" property="soType" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="SOID" property="soId" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="SONAME" property="soName" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="SOORGID" property="soOrgId" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="SOTGID" property="soTgId" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="SOTERMID" property="soTermId" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="SOGPID" property="soGpId" javaType="java.lang.String" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="queryWhere_Orgnization">
        where 1 = 1
        <choose>
            <when test="isRootNode == true">
                and O.ORG_ID = #{rootSoId}
            </when>
            <otherwise>
                <choose>
                    <when test="parentSoId != null and parentSoId != '' and parentSoId != '0'">
                        and O.P_ORG_ID = #{parentSoId}
                    </when>
                    <otherwise>
                        and 1 = 0
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </sql>

    <select id="getTreeNodeList_Orgnization" parameterType="java.util.Map" resultType="java.util.List" resultMap="sotnResultMap">
        select 'org-' || O.ORG_ID as "ID", O.ORG_NAME as "TEXT", 'FALSE' as LEAF,
               'org' as SOTYPE, TO_CHAR(O.ORG_ID) as SOID, O.ORG_NAME as SONAME,
               TO_CHAR(O.ORG_ID) as SOORGID, '' as SOTGID, '' as SOTERMID, '' as SOGPID
          from O_ORG O
          <include refid="queryWhere_Orgnization" />
         order by O.SORT_NO, O.ORG_NO
    </select>

    <select id="getTreeNodeCount_Orgnization" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(O.ORG_ID) as CNT
          from O_ORG O
          <include refid="queryWhere_Orgnization" />
    </select>

    <sql id="queryWhere_Tg">
        where 1 = 1
        <choose>
            <when test="parentSoId != null and parentSoId != '' and parentSoId != '0'">
                and TG.ORG_ID = #{parentSoId}
            </when>
            <otherwise>
                and 1 = 0
            </otherwise>
        </choose>
    </sql>

    <select id="getTreeNodeList_Tg" parameterType="java.util.Map" resultType="java.util.List" resultMap="sotnResultMap">
        select 'tg-' || TG.TG_ID as "ID", TG.TG_NAME as "TEXT", 'FALSE' as LEAF,
               'tg' as SOTYPE, TO_CHAR(TG.TG_ID) as SOID, TG.TG_NAME as SONAME,
               TO_CHAR(TG.ORG_ID) as SOORGID, TO_CHAR(TG.TG_ID) as SOTGID, '' as SOTERMID, '' as SOGPID
          from G_TG TG
          <include refid="queryWhere_Tg" />
         order by TG.TG_NAME
    </select>

    <select id="getTreeNodeCount_Tg" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(TG.TG_ID) as CNT
          from G_TG TG
          <include refid="queryWhere_Tg" />
    </select>

    <sql id="queryWhere_Terminal">
        where T.TERM_ID = R.TERM_ID and R.OBJ_TYPE = '2'
        <choose>
            <when test="parentSoId != null and parentSoId != '' and parentSoId != '0'">
                and R.OBJ_ID = #{parentSoId}
            </when>
            <otherwise>
                and 1 = 0
            </otherwise>
        </choose>
    </sql>

    <select id="getTreeNodeList_Terminal" parameterType="java.util.Map" resultType="java.util.List" resultMap="sotnResultMap">
        select 'term-' || T.TERM_ID as "ID", T.LOGICAL_ADDR as "TEXT", 'FALSE' as LEAF,
               'term' as SOTYPE, TO_CHAR(T.TERM_ID) as SOID, T.LOGICAL_ADDR as SONAME,
               TO_CHAR(T.ORG_ID) as SOORGID, TO_CHAR(R.OBJ_ID) as SOTGID, TO_CHAR(T.TERM_ID) as SOTERMID, '' as SOGPID
          from C_TERMINAL T, C_TERM_OBJ_RELA R
          <include refid="queryWhere_Terminal" />
         order by T.LOGICAL_ADDR
    </select>

    <select id="getTreeNodeCount_Terminal" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(T.TERM_ID) as CNT
          from C_TERMINAL T, C_TERM_OBJ_RELA R
          <include refid="queryWhere_Terminal" />
    </select>

    <sql id="queryWhere_Meter">
        where MP.MP_ID = GP.MP_ID and METER.METER_ID = MP.METER_ID
        <choose>
            <when test="parentSoId != null and parentSoId != '' and parentSoId != '0'">
                and GP.TERM_ID = #{parentSoId}
            </when>
            <otherwise>
                and 1 = 0
            </otherwise>
        </choose>
    </sql>

    <select id="getTreeNodeList_Meter" parameterType="java.util.Map" resultType="java.util.List" resultMap="sotnResultMap">
        select 'gp-' || GP.GP_ID as "ID", MP.MP_NAME as "TEXT", 'TRUE' as LEAF,
               'meter' as SOTYPE, TO_CHAR(GP.GP_ID) as SOID, MP.MP_NAME as SONAME,
               TO_CHAR(METER.ORG_ID) as SOORGID, TO_CHAR(MP.TG_ID) as SOTGID, TO_CHAR(GP.TERM_ID) as SOTERMID, TO_CHAR(GP.GP_ID) as SOGPID
          from C_METER METER, C_MP MP, C_GP GP
          <include refid="queryWhere_Meter" />
         order by GP.GP_SN
    </select>

    <select id="getTreeNodeCount_Meter" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(GP.GP_ID) as CNT
          from C_METER METER, C_MP MP, C_GP GP
          <include refid="queryWhere_Meter" />
    </select>

    <sql id="queryWhere_Protector">
        where GP.GP_ID = PS.GP_ID and T.TERM_ID = GP.TERM_ID
        <choose>
            <when test="parentSoId != null and parentSoId != '' and parentSoId != '0'">
                and GP.TERM_ID = #{parentSoId}
            </when>
            <otherwise>
                and 1 = 0
            </otherwise>
        </choose>
    </sql>

    <select id="getTreeNodeList_Protector" parameterType="java.util.Map" resultType="java.util.List" resultMap="sotnResultMap">
        select 'gp-' || GP.GP_ID as "ID", PS.PS_NAME as "TEXT", 'TRUE' as LEAF,
               'ps' as SOTYPE, TO_CHAR(GP.GP_ID) as SOID, PS.PS_NAME as SONAME,
               TO_CHAR(T.ORG_ID) as SOORGID, TO_CHAR(GP.OBJECT_ID) as SOTGID, TO_CHAR(GP.TERM_ID) as SOTERMID, TO_CHAR(GP.GP_ID) as SOGPID
          from C_PS PS, C_GP GP, C_TERMINAL T
          <include refid="queryWhere_Protector" />
         order by GP.GP_SN
    </select>

    <select id="getTreeNodeCount_Protector" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(GP.GP_ID) as CNT
          from C_PS PS, C_GP GP, C_TERMINAL T
          <include refid="queryWhere_Protector" />
    </select>

    <sql id="queryWhere_Analogue">
        where GP.GP_ID = AG.GP_ID and T.TERM_ID = GP.TERM_ID
        <choose>
            <when test="parentSoId != null and parentSoId != '' and parentSoId != '0'">
                and GP.TERM_ID = #{parentSoId}
            </when>
            <otherwise>
                and 1 = 0
            </otherwise>
        </choose>
    </sql>

    <select id="getTreeNodeList_Analogue" parameterType="java.util.Map" resultType="java.util.List" resultMap="sotnResultMap">
        select 'gp-' || GP.GP_ID as "ID", AG.ANALOGUE_NAME as "TEXT", 'TRUE' as LEAF,
               'ag' as SOTYPE, TO_CHAR(GP.GP_ID) as SOID, AG.ANALOGUE_NAME as SONAME,
               TO_CHAR(T.ORG_ID) as SOORGID, TO_CHAR(GP.OBJECT_ID) as SOTGID, TO_CHAR(GP.TERM_ID) as SOTERMID, TO_CHAR(GP.GP_ID) as SOGPID
          from C_ANALOGUE AG, C_GP GP, C_TERMINAL T
          <include refid="queryWhere_Analogue" />
         order by GP.PORT
    </select>

    <select id="getTreeNodeCount_Analogue" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(GP.GP_ID) as CNT
          from C_ANALOGUE AG, C_GP GP, C_TERMINAL T
          <include refid="queryWhere_Analogue" />
    </select>

    <sql id="queryWhere_Switch">
        where T.TERM_ID = SW.TERM_ID and T.TERM_ID = R.TERM_ID and R.OBJ_TYPE = '2'
        <choose>
            <when test="parentSoId != null and parentSoId != '' and parentSoId != '0'">
                and T.TERM_ID = #{parentSoId}
            </when>
            <otherwise>
                and 1 = 0
            </otherwise>
        </choose>
    </sql>

    <select id="getTreeNodeList_Switch" parameterType="java.util.Map" resultType="java.util.List" resultMap="sotnResultMap">
        select 'sw-' || SW.SWITCH_ID as "ID", SW.SWITCH_VALUE_NAME as "TEXT", 'TRUE' as LEAF,
               'sw' as SOTYPE, TO_CHAR(SW.SWITCH_ID) as SOID, SW.SWITCH_VALUE_NAME as SONAME,
               TO_CHAR(T.ORG_ID) as SOORGID, TO_CHAR(R.OBJ_ID) as SOTGID, TO_CHAR(T.TERM_ID) as SOTERMID, TO_CHAR(SW.SWITCH_ID) as SOGPID
          from C_SWITCH_VALUE SW, C_TERMINAL T, C_TERM_OBJ_RELA R
          <include refid="queryWhere_Switch" />
         order by SW.SWITCH_NO
    </select>

    <select id="getTreeNodeCount_Switch" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(SW.SWITCH_ID) as CNT
          from C_SWITCH_VALUE SW, C_TERMINAL T, C_TERM_OBJ_RELA R
          <include refid="queryWhere_Switch" />
    </select>

</mapper>